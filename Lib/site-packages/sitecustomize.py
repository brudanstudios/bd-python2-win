import os
import sys
from distutils.version import LooseVersion


def _list_package_dirs(resources_dir):

    package_dirs = []

    artifacts_root_dir = os.path.join(resources_dir, 'python', 'artifacts')

    if os.path.exists(artifacts_root_dir):

        for artifact_name in os.listdir(artifacts_root_dir):

            artifact_dir = os.path.join(artifacts_root_dir, artifact_name)

            versions = os.listdir(artifact_dir)
            if not versions:
                continue

            latest_version = max(versions, key=lambda x: LooseVersion(x.lstrip('v')))

            version_dir = os.path.join(artifact_dir, latest_version)
            if version_dir not in sys.path:
                package_dirs.append(version_dir)

    libs_dir = os.path.join(
        resources_dir, 'python', 'libs',
        '{}.{}'.format(sys.version_info.major, sys.version_info.minor)
    )
    if os.path.exists(libs_dir):
        package_dirs.append(libs_dir)

    return package_dirs


def main():
    pipeline_dir = os.getenv('BD_PIPELINE_DIR')
    if not pipeline_dir or not os.path.exists(pipeline_dir):
        return

    resources_dir = os.getenv('BD_RESOURCES_DIR', os.path.join(pipeline_dir, 'resources'))
    if not os.path.exists(resources_dir):
        return

    package_dirs = _list_package_dirs(resources_dir)
    if not package_dirs:
        return

    for package_dir in package_dirs:
        sys.path.insert(0, package_dir)

    os.environ['PYTHONPATH'] = os.pathsep.join(
        package_dirs + os.getenv('PYTHONPATH', '').split(os.pathsep)
    )


main()
